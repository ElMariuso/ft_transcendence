generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser                 Int                @id @default(autoincrement())
  username               String             @unique
  email                  String
  avatar                 String
  points                 Int
  isTwoFactorAuthEnabled Boolean
  id42                   Int                @unique
  twoFactorAuthSecret    String
  Blocked                Block[]            @relation("Blocked")
  Blocking               Block[]            @relation("Blocking")
  Channel                Channel[]
  Friend                 Friend[]           @relation("Friend")
  User                   Friend[]           @relation("User")
  Message                Message[]
  User_Achievement       User_Achievement[]
  User_Channel           User_Channel[]
  User_Game              User_Game[]
}

model Game {
  idGame     Int         @id @default(autoincrement())
  scoreLeft  Int
  scoreRight Int
  date       DateTime
  User_Game  User_Game[]
}

model User_Game {
  idUser_Game Int     @id @default(autoincrement())
  idUser      Int
  idGame      Int
  isWinner    Boolean
  Game        Game    @relation(fields: [idGame], references: [idGame])
  User        User    @relation(fields: [idUser], references: [idUser])
}

model Channel {
  idChannel    Int            @id @default(autoincrement())
  name         String
  password     String
  idOwner      Int
  idType       Int
  User         User           @relation(fields: [idOwner], references: [idUser])
  ChannelType  ChannelType    @relation(fields: [idType], references: [idChannelType])
  Message      Message[]
  User_Channel User_Channel[]
}

model ChannelType {
  idChannelType Int       @id @default(autoincrement())
  name          String
  Channel       Channel[]
}

model Message {
  idMessage  Int      @id @default(autoincrement())
  content    String
  timestamps DateTime
  idUser     Int
  idChannel  Int
  Channel    Channel  @relation(fields: [idChannel], references: [idChannel])
  User       User     @relation(fields: [idUser], references: [idUser])
}

model User_Channel {
  idUser_Channel Int       @id @default(autoincrement())
  idUser         Int
  idChannel      Int
  idRole         Int
  muteTime       DateTime?
  Channel        Channel   @relation(fields: [idChannel], references: [idChannel])
  Role           Role      @relation(fields: [idRole], references: [idRole])
  User           User      @relation(fields: [idUser], references: [idUser])
}

model Role {
  idRole       Int            @id @default(autoincrement())
  name         String
  User_Channel User_Channel[]
}

model Status {
  idStatus Int      @id @default(autoincrement())
  name     String
  Friend   Friend[]
}

model User_Achievement {
  idUser_Achievement Int         @id @default(autoincrement())
  idUser             Int
  idAchievement      Int
  Achievement        Achievement @relation(fields: [idAchievement], references: [idAchievement])
  User               User        @relation(fields: [idUser], references: [idUser])
}

model Achievement {
  idAchievement    Int                @id @default(autoincrement())
  name             String
  content          String
  User_Achievement User_Achievement[]
}

model Friend {
  idFriend     Int    @id @default(autoincrement())
  idUser       Int
  idFriendUser Int
  idStatus     Int
  FriendUser   User   @relation("Friend", fields: [idFriendUser], references: [idUser])
  Status       Status @relation(fields: [idStatus], references: [idStatus])
  User         User   @relation("User", fields: [idUser], references: [idUser])
}

model Block {
  idBlock       Int  @id @default(autoincrement())
  idUser        Int
  idBlockedUser Int
  BlockedUser   User @relation("Blocked", fields: [idBlockedUser], references: [idUser])
  User          User @relation("Blocking", fields: [idUser], references: [idUser])
}
