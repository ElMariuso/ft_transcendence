======================================================
== DOCKER SYSTEM DOCUMENTATION FOR ft_transcendence ==
======================================================
(In vscode, install the "Txt Syntax" extension for text with colours)

This Docker System Documentation outlines how the various services of the ft_transcendence project are containerized,
how they interact with each other, and provides a management script for common tasks.

#Docker Compose Files
######################

	There are two Docker Compose files provided for different environments: 
		* docker-compose.dev.yml for development
		* docker-compose.prod.yml for production

#Services
#########

	- Postgres:

		.Image: Uses the postgres:13 image.
		.Ports: The container's port 5432 is mapped to the host's port 5432.
		.Volumes: The database data is persisted in the local directory ./database.
		.Network: Connected to the db-network.
		.Environment Variables: Uses the .env file for its environment variables.
	
	- Backend:

		.Build Context: Directory ./backend with the Dockerfile located at ../dockerfiles/backend/Dockerfile.dev.
		.Ports: The container's port 3000 is mapped to the host's port 3000.
		.Volumes:
			* Logs are stored in ./logs-back.
			* Upload/downloads are stored in ./upload.
			* In DEV mode, the local backend directory is mounted into the container for live code updates,
			  allowing changes in the host directory to be reflected live in the container

		.Networks: Connected to the web-network and db-network.
		.Environment Variables: Uses the ./backend/.env file for its environment variables.
		.Dependencies: Relies on the postgres service to operate correctly.

	- Frontend:
		.Build Context: Directory ./frontend with the Dockerfile located at ../dockerfiles/frontend/Dockerfile.dev.
		.Ports: The container's port 8080 is mapped to the host's port 8080.
		.Volumes:
			* Logs are stored in ./logs-front.
			* In DEV mode, the local frontend directory is mounted into the container for live code updates, 
			  allowing changes in the host directory to be reflected live in the container

		.Network: Connected to the web-network.
		.Environment Variables: Uses the ./frontend/.env file for its environment variables.
		.Dependencies: Relies on the backend-dev service to operate correctly.


#Networks
##########

	There are two bridge networks defined:

		* web-network: Used to connect the frontend and the backend.
		* db-network: Used to connect the backend to the Postgres database.


#How to Use the Management Script (transcendence.sh)
#####################################################
Instead of using Docker Compose commands directly, a management script is provided to simplify common tasks.

Make sure the script has execution permissions:
	chmod +x management-script.sh

If an unrecognized command is provided, the script will output a usage guide.

	Available commands for the script:
	----------------------------------

		.start: Initializes and starts all the services. It builds any necessary images that are not available locally.
			./transcendence.sh dev|prod start

		.stop: Stops and removes all running containers but retains volumes.
			./transcendence.sh dev|prod stop

		.restart: Restarts all services, rebuilding the images if necessary.
			./transcendence.sh dev|prod restart

		.clean-volumes: Deletes the directories used for persistent storage 
						(database, logs-front, logs-back, and upload). 
						Use this with caution as it removes data!
			./transcendence.sh dev|prod clean-volumes

		.remove-volumes: Stops all services and removes associated volumes.
			./transcendence.sh dev|prod remove-volumes

		.remove-images: Stops all services and removes all associated images.
			./transcendence.sh dev|prod remove-images


